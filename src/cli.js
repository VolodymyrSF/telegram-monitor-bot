import readline from 'readline';
import { addChat, removeChat, listChats } from './chatManager.js';
import { addWord, removeWord, listWords } from './wordManager.js';
import { getStats } from './statManager.js';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function displayHelp() {
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('/addchat <ID –∞–±–æ @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è> - –î–æ–¥–∞—Ç–∏ —á–∞—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É');
    console.log('/removechat <ID –∞–±–æ @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è> - –í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É');
    console.log('/listchats - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤, —â–æ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å—Å—è');
    console.log('/addword <—Å–ª–æ–≤–æ> - –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è');
    console.log('/removeword <—Å–ª–æ–≤–æ> - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ');
    console.log('/listwords - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤');
    console.log('/stats - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ—Å—ñ—é');
    console.log('/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É');
    console.log('');
}

function handleCommand(line) {
    const [cmd, ...args] = line.trim().split(' ');

    switch (cmd) {
        case '/addchat':
            addChat(args[0])
              .then(chat => console.log(`–î–æ–¥–∞–Ω–æ —á–∞—Ç: ${chat.title} [${chat.id}]`))
              .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞:', err.message))
              .finally(() => rl.prompt());
            break;

        case '/removechat':
            try {
                const removed = removeChat(args[0]);
                console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —á–∞—Ç: ${removed.title} [${removed.id}]`);
            } catch (err) {
                console.error('–ü–æ–º–∏–ª–∫–∞:', err.message);
            }
            rl.prompt();
            break;

        case '/listchats':
            const chats = listChats();
            if (chats.length === 0) {
                console.log('–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —á–∞—Ç—É. –î–æ–¥–∞–π —Ö–æ—á –æ–¥–∏–Ω, —â–æ–± –Ω–µ —Å–∏–¥—ñ—Ç–∏ —è–∫ –¥—É—Ä–µ–Ω—å. ü§∑');
            } else {
                chats.forEach(c => {
                    console.log(`[${c.id}] ${c.title} (${c.input})`);
                });
            }
            rl.prompt();
            break;

        case '/addword':
            try {
                const added = addWord(args.join(' '));
                console.log(`–î–æ–¥–∞–Ω–æ —Å–ª–æ–≤–æ: ${added}`);
            } catch (err) {
                console.error('–ü–æ–º–∏–ª–∫–∞:', err.message);
            }
            rl.prompt();
            break;

        case '/removeword':
            try {
                const removed = removeWord(args.join(' '));
                console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: ${removed}`);
            } catch (err) {
                console.error('–ü–æ–º–∏–ª–∫–∞:', err.message);
            }
            rl.prompt();
            break;

        case '/listwords':
            const words = listWords();
            if (words.length === 0) {
                console.log('–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –¢–∏—à–∞ —è–∫ –Ω–∞ —Ü–≤–∏–Ω—Ç–∞—Ä—ñ.');
            } else {
                words.forEach(w => console.log(`- ${w}`));
            }
            rl.prompt();
            break;

        case '/stats':
            getStats();
            rl.prompt();
            break;

        case '/help':
            displayHelp();
            rl.prompt();
            break;

        default:
            console.log('–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.');
            rl.prompt();
    }
}

function startCLI() {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (–∞–±–æ /help):');
    rl.setPrompt('> ');
    rl.prompt();
    rl.on('line', (line) => {
        handleCommand(line);
        rl.prompt();
    });
    rl.on('close', () => {
        console.log('\nCLI –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
        process.exit(0);
    });
}

export { startCLI };