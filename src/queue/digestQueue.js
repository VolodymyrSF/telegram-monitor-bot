import fs from 'fs/promises';
import path from 'path';

const DIGEST_PATH = path.join(process.cwd(), 'queue', 'daily_digest.json');

async function ensureDirectoryExists(filePath) {
  const dir = path.dirname(filePath);
  try {
    await fs.mkdir(dir, { recursive: true });
  } catch (err) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è digest:', err.message);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—à–∫–∞ ‚Äî –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ (–ø–æ chatId + messageId)
export async function addToDigestQueue(item) {
  try {
    await ensureDirectoryExists(DIGEST_PATH);

    let data = [];
    try {
      const raw = await fs.readFile(DIGEST_PATH, 'utf8');
      data = JSON.parse(raw);
    } catch {
      // –Ω—ñ—á–æ–≥–æ, —Ñ–∞–π–ª –ø—Ä–æ—Å—Ç–æ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
    }

    const exists = data.some(
      i => i.chatId === item.chatId && i.messageId === item.messageId
    );
    if (!exists) {
      data.push(item);
      await fs.writeFile(DIGEST_PATH, JSON.stringify(data, null, 2), 'utf8');
      console.log(`üì• –î–æ–¥–∞–Ω–æ –≤ digest: ${item.chatTitle} (${item.messageId})`);
    } else {
      console.log(`‚ö†Ô∏è –î—É–±–ª—å. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ: ${item.chatTitle} (${item.messageId})`);
    }
  } catch (err) {
    console.error('‚ùå Digest Queue write error:', err);
  }
}

export async function readDigestQueue() {
  try {
    await ensureDirectoryExists(DIGEST_PATH);
    const raw = await fs.readFile(DIGEST_PATH, 'utf8');
    return JSON.parse(raw);
  } catch {
    return [];
  }
}

export async function clearDigestQueue() {
  try {
    await ensureDirectoryExists(DIGEST_PATH);
    await fs.writeFile(DIGEST_PATH, '[]', 'utf8');
    console.log('üßπ Digest queue –æ—á–∏—â–µ–Ω–æ.');
  } catch (err) {
    console.error('‚ùå Digest Queue clear error:', err);
  }
}
