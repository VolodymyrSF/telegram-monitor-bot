import readline from 'readline'
import {
    addChatToGroup,
    removeChatFromGroup,
    listChatsInGroup,
    createGroup,
    deleteGroup,
    listGroups,
    setGroupEmail,
    clearGroupEmail,
    addTelegramRecipientToGroup,
    removeTelegramRecipientFromGroup,
    listAll
} from './chatManager.js'
import {
    addWordToGroup,
    removeWordFromGroup,
    listWordsInGroup
} from './wordManager.js'



import nodemailer from 'nodemailer'
import { setEnvVariable } from '../utils/envManager.js'
import { readConfig, writeConfig } from '../utils/storage.js'
import { clearQueue, readQueue } from '../queue/queue.js'
import { getStats, resetStats } from './statManager.js'
import { decrypt } from '../utils/encryption.js'
import fs from 'fs/promises'


const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: true,
});

function displayHelp() {
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('/creategroup <–Ω–∞–∑–≤–∞> - –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É –¥–ª—è —á–∞—Ç—ñ–≤');
    console.log('/deletegroup <–Ω–∞–∑–≤–∞> - –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É');
    console.log('/listgroups - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø');
    console.log('/addchat <–≥—Ä—É–ø–∞> <ID –∞–±–æ @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è> - –î–æ–¥–∞—Ç–∏ —á–∞—Ç –¥–æ –≥—Ä—É–ø–∏');
    console.log('/removechat <–≥—Ä—É–ø–∞> <ID –∞–±–æ @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è> - –í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç –∑ –≥—Ä—É–ø–∏');
    console.log('/listchats <–≥—Ä—É–ø–∞> - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ');
    console.log('/addword <–≥—Ä—É–ø–∞> <—Å–ª–æ–≤–æ> - –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–æ –≥—Ä—É–ø–∏');
    console.log('/removeword <–≥—Ä—É–ø–∞> <—Å–ª–æ–≤–æ> - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∑ –≥—Ä—É–ø–∏');
    console.log('/listwords <–≥—Ä—É–ø–∞> - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É –≥—Ä—É–ø—ñ');
    console.log('/setgroupemail <–≥—Ä—É–ø–∞> <email> - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ email –¥–ª—è –≥—Ä—É–ø–∏');
    console.log('/removegroupemail <–≥—Ä—É–ø–∞> <email> - –í–∏–¥–∞–ª–∏—Ç–∏ email –¥–ª—è –≥—Ä—É–ø–∏');
    console.log('/addtgrecipient <–≥—Ä—É–ø–∞> <@username –∞–±–æ userId> - –î–æ–¥–∞—Ç–∏ TG-–æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏');
    console.log('/removetgrecipient <–≥—Ä—É–ø–∞> <@username –∞–±–æ userId> - –í–∏–¥–∞–ª–∏—Ç–∏ TG-–æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏');
    console.log('/listtgrecipients - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ TG-–æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –ø–æ –≥—Ä—É–ø–∞—Ö');
    console.log('/showqueue - –ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥—É –Ω–µ–Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å');
    console.log('/retryfailed - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ —á–µ—Ä–≥–∏');
    console.log('/listAll - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏ –∑ —á–∞—Ç–∞–º–∏');
    console.log('/stats - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ—Å—ñ—é');
    console.log('/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É');
    console.log('');
}

async function handleCommand(line) {
    const match = line.trim().match(/(?:[^\s"]+|"[^"]*")+/g);
    if (!match) return;
    const [cmd, ...args] = match.map(arg => arg.replace(/^"(.+(?="$))"$/, '$1'));
    try {
        switch (cmd) {
            case '/creategroup':
                if (!args[0]) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏.')
                await createGroup(args[0])
                console.log(`–ì—Ä—É–ø—É "${args[0]}" —Å—Ç–≤–æ—Ä–µ–Ω–æ`)
                break

            case '/deletegroup':
                if (!args[0]) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.')
                await deleteGroup(args[0])
                console.log(`–ì—Ä—É–ø—É "${args[0]}" –≤–∏–¥–∞–ª–µ–Ω–æ`)
                break

            case '/listgroups': {
                const groups = await listGroups()
                if (groups.length === 0) {
                    console.log('–ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏.')
                } else {
                    groups.forEach(g => console.log(`- ${g.name} (–ß–∞—Ç—ñ–≤: ${g.chats.length})`))
                }
                break
            }

            case '/addchat':
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ —Ç–∞ —á–∞—Ç.')
                const added = await addChatToGroup(args[0], args[1])
                console.log(`–î–æ–¥–∞–Ω–æ —á–∞—Ç ${added.title} –¥–æ –≥—Ä—É–ø–∏ ${args[0]}`)
                break

            case '/removechat':
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ —Ç–∞ —á–∞—Ç.')
                const removed = await removeChatFromGroup(args[0], args[1])
                console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —á–∞—Ç ${removed.title} –∑ –≥—Ä—É–ø–∏ ${args[0]}`)
                break

            case '/listchats': {
                if (!args[0]) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏.')
                const chats = await listChatsInGroup(args[0])
                if (chats.length === 0) {
                    console.log(`–£ –≥—Ä—É–ø—ñ ${args[0]} –Ω–µ–º–∞—î —á–∞—Ç—ñ–≤.`)
                } else {
                    chats.forEach(c => console.log(`- ${c.title} (${c.id})`))
                }
                break
            }

            case '/addword':
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É —Ç–∞ —Å–ª–æ–≤–æ.')
                const word = await addWordToGroup(args[0], args[1])
                console.log(`–î–æ–¥–∞–Ω–æ —Å–ª–æ–≤–æ "${word}" –¥–æ –≥—Ä—É–ø–∏ ${args[0]}`)
                break

            case '/removeword':
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É —Ç–∞ —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.')
                const removedWord = await removeWordFromGroup(args[0], args[1])
                console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ "${removedWord}" –∑ –≥—Ä—É–ø–∏ ${args[0]}`)
                break

            case '/listwords': {
                if (!args[0]) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É.')
                const words = await listWordsInGroup(args[0])
                if (words.length === 0) {
                    console.log(`–£ –≥—Ä—É–ø—ñ ${args[0]} –Ω–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤.`)
                } else {
                    words.forEach(w => console.log(`- ${w}`))
                }
                break
            }

            case '/setgroupemail': {
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É —Ç–∞ email.')
                const [groupName, email] = args
                await setEnvVariable(`GROUP_EMAIL_${groupName.toUpperCase()}`, email)
                console.log(`Email –¥–ª—è –≥—Ä—É–ø–∏ "${groupName}" –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${email}"`)

                const config = await readConfig()
                const group = config.groups.find(g => g.name === groupName)
                if (group) {
                    group.email = email
                    await writeConfig(config)
                } else {
                    console.warn(`–ì—Ä—É–ø–∞ "${groupName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.`)
                }
                break
            }

            case '/removegroupemail': {
                if (args.length < 2) return console.log('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É —Ç–∞ email –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.')
                const [groupName, email] = args

                try {
                    await clearGroupEmail(groupName, email)
                    await setEnvVariable(`GROUP_EMAIL_${groupName.toUpperCase()}`, '') // —á–∏—Å—Ç–∏–º–æ .env
                    console.log(`Email "${email}" –¥–ª—è –≥—Ä—É–ø–∏ "${groupName}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`)
                } catch (err) {
                    console.log('–ü–æ–º–∏–ª–∫–∞:', err.message)
                }

                break
            }

            case '/showqueue': {
                const items = await readQueue()
                console.log(`üóÇÔ∏è –£ —á–µ—Ä–∑—ñ ${items.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
                items.forEach((item, idx) => {
                    console.log(`--- #${idx + 1} ---`)
                    console.log(`To: ${item.to}`)
                    console.log(`Subject: ${item.subject}`)
                    console.log(`Text: ${item.text}`)
                });
                break;
            }

            case '/retryfailed': {
                const items = await readQueue()

                if (!items.length) {
                    console.log('üì≠ –£ —á–µ—Ä–∑—ñ –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
                    break;
                }

                const transporter = nodemailer.createTransport({
                    host: process.env.SMTP_HOST,
                    port: Number(process.env.SMTP_PORT),
                    secure: false,
                    auth: {
                        user: process.env.SMTP_EMAIL,
                        pass: decrypt(process.env.SMTP_PASSWORD)
                    }
                });

                const failed = []

                for (const item of items) {
                    try {
                        await transporter.sendMail(item)
                        console.log(`‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ: ${item.subject}`)
                    } catch (e) {
                        console.log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: ${item.subject}`, e.message)
                        failed.push(item)
                    }
                }

                if (failed.length) {
                    console.log(`üîÅ –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${failed.length} –Ω–µ–≤–¥–∞–ª–∏—Ö, –ø–æ–≤–µ—Ä—Ç–∞—é –≤ —á–µ—Ä–≥—É...`)
                    await fs.writeFile('./queue/errors.json', JSON.stringify(failed, null, 2), 'utf8')
                } else {
                    await clearQueue()
                    console.log('üßπ –ß–µ—Ä–≥—É –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ')
                }

                break;
            }
            case '/addtgrecipient':
                if (args.length < 2) return console.log('–í–∫–∞–∂–∏ –≥—Ä—É–ø—É —ñ @username –∞–±–æ userId.')
                await addTelegramRecipientToGroup(args[0], args[1])
                console.log(`üü¢ –î–æ–¥–∞–Ω–æ Telegram-–æ—Ç—Ä–∏–º—É–≤–∞—á–∞ "${args[1]}" –¥–æ –≥—Ä—É–ø–∏ "${args[0]}"`)
                break

            case '/removetgrecipient':
                if (args.length < 2) return console.log('–í–∫–∞–∂–∏ –≥—Ä—É–ø—É —ñ @username –∞–±–æ userId.')
                await removeTelegramRecipientFromGroup(args[0], args[1])
                console.log(`üî¥ –í–∏–¥–∞–ª–µ–Ω–æ Telegram-–æ—Ç—Ä–∏–º—É–≤–∞—á–∞ "${args[1]}" –∑ –≥—Ä—É–ø–∏ "${args[0]}"`)
                break


            case '/listtgrecipients': {
                const recipientsByGroup = await listTelegramRecipients()
                if (recipientsByGroup.length === 0) {
                    console.log('‚ùå –£ –∂–æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î Telegram-–æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤.')
                } else {
                    for (const { group, recipients } of recipientsByGroup) {
                        console.log(`üì¶ –ì—Ä—É–ø–∞ "${group}":`)
                        recipients.forEach((r, i) => console.log(`  ${i + 1}. ${r}`))
                        console.log('')
                    }
                }
                break
            }

            case '/listAll':{
                await listAll();
              break;
            }


            case '/stats': {
                const stats = getStats()
                break
            }

            case '/help':
                displayHelp();
                rl.prompt();
                break;


            default:
                console.log('–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.');
                rl.prompt();
        }
        } catch (err) {
            console.log('–ü–æ–º–∏–ª–∫–∞:', err.message)
        } finally {
            rl.prompt()
        }
    }
await resetStats()

function startCLI() {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (–∞–±–æ /help):');
    rl.setPrompt('> ');
    rl.prompt();
    rl.on('line', (line) => {
        handleCommand(line);
        rl.prompt();
    });
    rl.on('close', () => {
        console.log('\nCLI –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
        process.exit(0);
    });
    rl.prompt();
}

export { startCLI };