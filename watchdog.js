import { exec, spawn } from 'child_process';
import { config } from 'dotenv'
import { sendErrorEmail } from './src/email.js'
import { client } from './src/telegram.js'

config()

import nodemailer from 'nodemailer'
import { decrypt } from './src/encryption.js'

const log = (msg) => console.log(`[WATCHDOG]: ${msg}`)


const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT),
  secure: false,
  auth: {
    user: process.env.SMTP_EMAIL,
    pass: decrypt(process.env.SMTP_PASSWORD)
  }
})

transporter.verify(async function (error, success) {
  if (error) {
    log(`‚ùå SMTP –Ω–µ –ø—Ä–∞—Ü—é—î: ${error.message}`)
    await tryNotifyViaTelegram(`SMTP –ø–æ–ª–∞–º–∞–≤—Å—è –Ω–∞—Ö—É–π: ${error.message}`)
    process.exit(1)
  } else {
    log('‚úÖ SMTP –ø—Ä–∞—Ü—é—î. –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...')
    startBot()
  }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
function startBot() {
  const child = spawn('node', ['index.js']);


  child.stdout.pipe(process.stdout); // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ stdout –±–æ—Ç–∞ –Ω–∞ stdout watchdog
  child.stderr.on('data', async (data) => {
    log(`stderr: ${data}`);
    await handleError(`–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: ${data}`);
  });

  child.stderr.on('data', async (data) => {
    log(`stderr: ${data}`);
    await handleError(`–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: ${data}`);
  });

  child.on('close', async (code) => {
    await handleError(`–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º ${code}`);
  });

  // –ü–µ—Ä–µ–¥–∞—á–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ
  process.stdin.pipe(child.stdin);
}

async function handleError(msg) {
  try {
    await sendErrorEmail(new Error(msg))
    log('üìß Email –∑ –ø–æ–º–∏–ª–∫–æ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ')
  } catch (e) {
    log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ email. –ü—Ä–æ–±—É—é –∫–∏–Ω—É—Ç–∏ –≤ Telegram...')
    await tryNotifyViaTelegram(`–ë–æ—Ç –≤–º–µ—Ä. Email —Ç–µ–∂ –≤–º–µ—Ä. –¢—Ä–∏–º–∞–π –º–µ—Å–∞–≥—É —Ç—É—Ç:\n\n${msg}`)
  }
  process.exit(1)
}

async function tryNotifyViaTelegram(message) {
  try {
    await client.connect()
    await client.sendMessage('me', { message })
    log('üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram')
  } catch (err) {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram: ${err.message}`)
  }
}
